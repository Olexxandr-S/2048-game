{"version":3,"sources":["components/Button/Button.tsx","components/Board/context/BoardContext.tsx","components/Board/hooks/useBoard.ts","components/Board/models/Board.ts","components/Grid/Grid.tsx","components/Tile/Tile.tsx","hooks/usePrevProps.ts","components/Board/Board.tsx","components/Tile/models/Tile.ts","components/Game/hooks/useIds.ts","components/Game/hooks/useGame/reducer.ts","components/Game/hooks/useGame/useGame.ts","components/Game/Game.tsx","App.tsx","index.tsx"],"names":["Button","children","onClick","className","BoardContext","React","createContext","containerWidth","tileCount","defaultTileCount","BoardProvider","Provider","value","useBoard","useContext","Grid","length","cells","index","push","renderGrid","Tile","position","zIndex","useState","scale","setScale","previousValue","ref","useRef","useEffect","current","usePrevProps","withinBoardBoundaries","invariant","shallHighlight","undefined","setTimeout","positionToPixels","style","top","left","transform","Board","tiles","tileCountPerRow","tileWidth","boardWidth","tileList","map","id","restProps","width","seqId","initialState","byIds","hasChanged","inMotion","GameReducer","state","action","type","tile","source","destination","restTiles","filter","useGame","isInitialRender","nextId","useReducer","dispatch","createTile","useCallback","throttledMergeTile","mergeTile","updateTile","retrieveTileMap","tileMap","Array","tileCountPerRowOrColumn","fill","forEach","positionToIndex","findEmptyTiles","reduce","result","tileId","indexToPosition","generateRandomTile","emptyTiles","Math","floor","random","move","retrieveTileIdsPerRowOrColumn","calculateFirstFreeIndex","maxIndex","rowOrColumnIndex","availableTileIds","previousTile","mergedTilesCount","nonEmptyTileIndex","currentTile","mergeWith","hasXChanged","hasYChanged","didTileMove","bind","rowIndex","tileIndex","tileInRowIndex","howManyMerges","_","reverse","maxIndexInRow","columnIndex","tileInColumnIndex","maxIndexInColumn","Game","moveLeft","moveRight","moveUp","moveDown","throttledHandleKeyDown","useThrottledCallback","e","preventDefault","code","leading","trailing","window","addEventListener","removeEventListener","App","Date","date","setDate","href","toISOString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10b16f4f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./button.less\";\r\n\r\ntype Props = {\r\n  children: any;\r\n  onClick?: () => void;\r\n};\r\n\r\nexport const Button = ({ children, onClick }: Props) => {\r\n  return (\r\n    <button className=\"button\" onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { tileCount as defaultTileCount } from \"../index\";\r\n\r\nexport const BoardContext = React.createContext({\r\n  containerWidth: 0,\r\n  tileCount: defaultTileCount,\r\n});\r\n\r\ntype Props = {\r\n  containerWidth: number;\r\n  tileCount: number;\r\n  children: any;\r\n};\r\n\r\nexport const BoardProvider = ({\r\n  children,\r\n  containerWidth = 0,\r\n  tileCount = defaultTileCount,\r\n}: Props) => {\r\n  return (\r\n    <BoardContext.Provider value={{ containerWidth, tileCount }}>\r\n      {children}\r\n    </BoardContext.Provider>\r\n  );\r\n};\r\n","import { useContext } from \"react\";\r\nimport { BoardContext } from \"../context/BoardContext\";\r\n\r\nexport const useBoard = () => {\r\n  const { containerWidth, tileCount } = useContext(BoardContext);\r\n\r\n  return [containerWidth, tileCount] as [number, number];\r\n};\r\n","import { pixelSize } from \"../../../styles\";\r\n\r\n/**\r\n * The number of tiles per row and column.\r\n * IMPORTANT! Check styles before changing this value!\r\n *\r\n * @constant {number}\r\n */\r\nexport const tileCount = 4;\r\n\r\n/**\r\n * The duration of every animation in ms.\r\n * IMPORTANT! Check styles before modifying this value!\r\n *\r\n * @constant {number} ms\r\n */\r\nexport const animationDuration = 250;\r\n\r\n/**\r\n * The board margin (left, right, top, bottom).\r\n */\r\nexport const boardMargin = 2 * pixelSize;\r\n","import React from \"react\";\r\nimport { useBoard } from \"../Board\";\r\n\r\nimport \"./grid.less\";\r\n\r\nexport const Grid = () => {\r\n  const [, tileCount] = useBoard();\r\n\r\n  const renderGrid = () => {\r\n    const length = tileCount * tileCount;\r\n    const cells = [] as JSX.Element[];\r\n\r\n    for (let index = 0; index < length; index += 1) {\r\n      cells.push(<div key={`${index}`} className={`grid-cell`} />);\r\n    }\r\n\r\n    return cells;\r\n  };\r\n\r\n  return <div className=\"grid\">{renderGrid()}</div>;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport invariant from \"tiny-invariant\";\r\nimport { usePrevProps } from \"../../hooks/usePrevProps\";\r\nimport { useBoard } from \"../Board\";\r\nimport \"./tile.less\";\r\n\r\ntype Props = {\r\n  value: number;\r\n  position: [number, number];\r\n  zIndex: number;\r\n};\r\n\r\nexport const Tile = ({ value, position, zIndex }: Props) => {\r\n  const [containerWidth, tileCount] = useBoard();\r\n  const [scale, setScale] = useState(1);\r\n\r\n  const previousValue = usePrevProps<number>(value);\r\n\r\n  const withinBoardBoundaries =\r\n    position[0] < tileCount && position[1] < tileCount;\r\n  invariant(withinBoardBoundaries, \"Tile out of bound\");\r\n\r\n  const isNew = previousValue === undefined;\r\n  const hasChanged = previousValue !== value;\r\n  const shallHighlight = isNew || hasChanged;\r\n\r\n  useEffect(() => {\r\n    if (shallHighlight) {\r\n      setScale(1.1);\r\n      setTimeout(() => setScale(1), 100);\r\n    }\r\n  }, [shallHighlight, scale]);\r\n\r\n  const positionToPixels = (position: number) => {\r\n    return (position / tileCount) * (containerWidth as number);\r\n  };\r\n\r\n  const style = {\r\n    top: positionToPixels(position[1]),\r\n    left: positionToPixels(position[0]),\r\n    transform: `scale(${scale})`,\r\n    zIndex,\r\n  };\r\n\r\n  return (\r\n    <div className={`tile tile-${value}`} style={style}>\r\n      {value}\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useRef } from \"react\";\r\n\r\n/**\r\n * `usePrevProps` stores the previous value of the prop.\r\n *\r\n * @link https://blog.logrocket.com/how-to-get-previous-props-state-with-react-hooks/\r\n * @param {K} value\r\n * @returns {K | undefined}\r\n */\r\nexport const usePrevProps = <K = any>(value: K) => {\r\n  const ref = useRef<K>();\r\n\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n\r\n  return ref.current;\r\n};\r\n","import React from \"react\";\r\nimport { BoardProvider } from \"./context/BoardContext\";\r\nimport { boardMargin, tileCount as defaultTileCount } from \"./models/Board\";\r\nimport { Grid } from \"../Grid\";\r\nimport { TileMeta, tileTotalWidth, Tile } from \"../Tile\";\r\nimport \"./board.less\";\r\n\r\ntype Props = {\r\n  tiles: TileMeta[];\r\n  tileCountPerRow: number;\r\n};\r\n\r\nexport const Board = ({ tiles, tileCountPerRow = defaultTileCount }: Props) => {\r\n  // container width = tile width * tile count per row\r\n  const containerWidth = tileTotalWidth * tileCountPerRow;\r\n  // board width = container width + margin\r\n  const boardWidth = containerWidth + boardMargin;\r\n\r\n  // render all tiles on the board\r\n  const tileList = tiles.map(({ id, ...restProps }) => (\r\n    <Tile key={`tile-${id}`} {...restProps} zIndex={id} />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"board\" style={{ width: boardWidth }}>\r\n      <BoardProvider\r\n        containerWidth={containerWidth}\r\n        tileCount={tileCountPerRow}\r\n      >\r\n        <div className=\"tile-container\">{tileList}</div>\r\n        <Grid />\r\n      </BoardProvider>\r\n    </div>\r\n  );\r\n};\r\n","import { pixelSize } from \"../../../styles\";\r\n\r\nexport type TileMeta = {\r\n  id: number;\r\n  position: [number, number];\r\n  value: number;\r\n  mergeWith?: number;\r\n};\r\n\r\nconst tileMargin = 2 * pixelSize;\r\n\r\nconst tileWidthMultiplier = 12.5;\r\n\r\nconst tileWidth = tileWidthMultiplier * pixelSize;\r\n\r\nexport const tileTotalWidth = tileWidth + tileMargin;\r\n","let seqId = 1;\r\n\r\nexport const useIds = () => {\r\n  const nextId = () => {\r\n    return seqId++;\r\n  };\r\n\r\n  return [nextId];\r\n};\r\n","import { TileMeta } from \"../../../Tile\";\r\n\r\ntype State = {\r\n  tiles: {\r\n    [id: number]: TileMeta;\r\n  };\r\n  inMotion: boolean;\r\n  hasChanged: boolean;\r\n  byIds: number[];\r\n};\r\n\r\nexport const initialState: State = {\r\n  tiles: {},\r\n  byIds: [],\r\n  hasChanged: false,\r\n  inMotion: false,\r\n};\r\n\r\ntype Action =\r\n  | { type: \"CREATE_TILE\"; tile: TileMeta }\r\n  | { type: \"UPDATE_TILE\"; tile: TileMeta }\r\n  | { type: \"MERGE_TILE\"; source: TileMeta; destination: TileMeta }\r\n  | { type: \"START_MOVE\" }\r\n  | { type: \"END_MOVE\" };\r\n\r\nexport const GameReducer = (state: State, action: Action) => {\r\n  switch (action.type) {\r\n    case \"CREATE_TILE\":\r\n      return {\r\n        ...state,\r\n        tiles: {\r\n          ...state.tiles,\r\n          [action.tile.id]: action.tile,\r\n        },\r\n        byIds: [...state.byIds, action.tile.id],\r\n        hasChanged: false,\r\n      };\r\n    case \"UPDATE_TILE\":\r\n      return {\r\n        ...state,\r\n        tiles: {\r\n          ...state.tiles,\r\n          [action.tile.id]: action.tile,\r\n        },\r\n        hasChanged: true,\r\n      };\r\n    case \"MERGE_TILE\":\r\n      const {\r\n        [action.source.id]: source,\r\n        [action.destination.id]: destination,\r\n        ...restTiles\r\n      } = state.tiles;\r\n      return {\r\n        ...state,\r\n        tiles: {\r\n          ...restTiles,\r\n          [action.destination.id]: {\r\n            id: action.destination.id,\r\n            value: action.source.value + action.destination.value,\r\n            position: action.destination.position,\r\n          },\r\n        },\r\n        byIds: state.byIds.filter((id) => id !== action.source.id),\r\n        hasChanged: true,\r\n      };\r\n    case \"START_MOVE\":\r\n      return {\r\n        ...state,\r\n        inMotion: true,\r\n      };\r\n    case \"END_MOVE\":\r\n      return {\r\n        ...state,\r\n        inMotion: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { useCallback, useEffect, useReducer, useRef } from \"react\";\r\nimport {\r\n  animationDuration,\r\n  tileCount as tileCountPerRowOrColumn,\r\n} from \"../../../Board\";\r\nimport { TileMeta } from \"../../../Tile\";\r\nimport { useIds } from \"../useIds\";\r\nimport { GameReducer, initialState } from \"./reducer\";\r\n\r\nexport const useGame = () => {\r\n  const isInitialRender = useRef(true);\r\n  const [nextId] = useIds();\r\n\r\n  const [state, dispatch] = useReducer(GameReducer, initialState);\r\n  const { tiles, byIds, hasChanged, inMotion } = state;\r\n\r\n  const createTile = useCallback(\r\n    ({ position, value }: Partial<TileMeta>) => {\r\n      const tile = {\r\n        id: nextId(),\r\n        position,\r\n        value,\r\n      } as TileMeta;\r\n      dispatch({ type: \"CREATE_TILE\", tile });\r\n    },\r\n    [nextId]\r\n  );\r\n\r\n  const mergeTile = (source: TileMeta, destination: TileMeta) => {\r\n    dispatch({ type: \"MERGE_TILE\", source, destination });\r\n  };\r\n\r\n  const throttledMergeTile = (source: TileMeta, destination: TileMeta) => {\r\n    setTimeout(() => mergeTile(source, destination), animationDuration);\r\n  };\r\n\r\n  const updateTile = (tile: TileMeta) => {\r\n    dispatch({ type: \"UPDATE_TILE\", tile });\r\n  };\r\n\r\n  const didTileMove = (source: TileMeta, destination: TileMeta) => {\r\n    const hasXChanged = source.position[0] !== destination.position[0];\r\n    const hasYChanged = source.position[1] !== destination.position[1];\r\n\r\n    return hasXChanged || hasYChanged;\r\n  };\r\n\r\n  const retrieveTileMap = useCallback(() => {\r\n    const tileMap = new Array(\r\n      tileCountPerRowOrColumn * tileCountPerRowOrColumn\r\n    ).fill(0) as number[];\r\n\r\n    byIds.forEach((id) => {\r\n      const { position } = tiles[id];\r\n      const index = positionToIndex(position);\r\n      tileMap[index] = id;\r\n    });\r\n\r\n    return tileMap;\r\n  }, [byIds, tiles]);\r\n\r\n  const findEmptyTiles = useCallback(() => {\r\n    const tileMap = retrieveTileMap();\r\n\r\n    const emptyTiles = tileMap.reduce((result, tileId, index) => {\r\n      if (tileId === 0) {\r\n        return [...result, indexToPosition(index) as [number, number]];\r\n      }\r\n\r\n      return result;\r\n    }, [] as [number, number][]);\r\n\r\n    return emptyTiles;\r\n  }, [retrieveTileMap]);\r\n\r\n  const generateRandomTile = useCallback(() => {\r\n    const emptyTiles = findEmptyTiles();\r\n\r\n    if (emptyTiles.length > 0) {\r\n      const index = Math.floor(Math.random() * emptyTiles.length);\r\n      const position = emptyTiles[index];\r\n\r\n      createTile({ position, value: 2 });\r\n    }\r\n  }, [findEmptyTiles, createTile]);\r\n\r\n  const positionToIndex = (position: [number, number]) => {\r\n    return position[1] * tileCountPerRowOrColumn + position[0];\r\n  };\r\n\r\n  const indexToPosition = (index: number) => {\r\n    const x = index % tileCountPerRowOrColumn;\r\n    const y = Math.floor(index / tileCountPerRowOrColumn);\r\n    return [x, y];\r\n  };\r\n\r\n  type RetrieveTileIdsPerRowOrColumn = (rowOrColumnIndex: number) => number[];\r\n\r\n  type CalculateTileIndex = (\r\n    tileIndex: number,\r\n    tileInRowIndex: number,\r\n    howManyMerges: number,\r\n    maxIndexInRow: number\r\n  ) => number;\r\n\r\n  const move = (\r\n    retrieveTileIdsPerRowOrColumn: RetrieveTileIdsPerRowOrColumn,\r\n    calculateFirstFreeIndex: CalculateTileIndex\r\n  ) => {\r\n\r\n    dispatch({ type: \"START_MOVE\" });\r\n\r\n    const maxIndex = tileCountPerRowOrColumn - 1;\r\n\r\n    for (\r\n      let rowOrColumnIndex = 0;\r\n      rowOrColumnIndex < tileCountPerRowOrColumn;\r\n      rowOrColumnIndex += 1\r\n    ) {\r\n      const availableTileIds = retrieveTileIdsPerRowOrColumn(rowOrColumnIndex);\r\n\r\n      let previousTile: TileMeta | undefined;\r\n      let mergedTilesCount = 0;\r\n\r\n      availableTileIds.forEach((tileId, nonEmptyTileIndex) => {\r\n        const currentTile = tiles[tileId];\r\n\r\n        if (\r\n          previousTile !== undefined &&\r\n          previousTile.value === currentTile.value\r\n        ) {\r\n          const tile = {\r\n            ...currentTile,\r\n            position: previousTile.position,\r\n            mergeWith: previousTile.id,\r\n          } as TileMeta;\r\n\r\n          throttledMergeTile(tile, previousTile);\r\n          previousTile = undefined;\r\n          mergedTilesCount += 1;\r\n\r\n          return updateTile(tile);\r\n        }\r\n\r\n        const tile = {\r\n          ...currentTile,\r\n          position: indexToPosition(\r\n            calculateFirstFreeIndex(\r\n              rowOrColumnIndex,\r\n              nonEmptyTileIndex,\r\n              mergedTilesCount,\r\n              maxIndex\r\n            )\r\n          ),\r\n        } as TileMeta;\r\n\r\n        previousTile = tile;\r\n\r\n        if (didTileMove(currentTile, tile)) {\r\n          return updateTile(tile);\r\n        }\r\n      });\r\n    }\r\n\r\n    setTimeout(() => dispatch({ type: \"END_MOVE\" }), animationDuration);\r\n  };\r\n\r\n  const moveLeftFactory = () => {\r\n    const retrieveTileIdsByRow = (rowIndex: number) => {\r\n      const tileMap = retrieveTileMap();\r\n\r\n      const tileIdsInRow = [\r\n        tileMap[rowIndex * tileCountPerRowOrColumn + 0],\r\n        tileMap[rowIndex * tileCountPerRowOrColumn + 1],\r\n        tileMap[rowIndex * tileCountPerRowOrColumn + 2],\r\n        tileMap[rowIndex * tileCountPerRowOrColumn + 3],\r\n      ];\r\n\r\n      const nonEmptyTiles = tileIdsInRow.filter((id) => id !== 0);\r\n      return nonEmptyTiles;\r\n    };\r\n\r\n    const calculateFirstFreeIndex = (\r\n      tileIndex: number,\r\n      tileInRowIndex: number,\r\n      howManyMerges: number,\r\n      _: number\r\n    ) => {\r\n      return (\r\n        tileIndex * tileCountPerRowOrColumn + tileInRowIndex - howManyMerges\r\n      );\r\n    };\r\n\r\n    return move.bind(this, retrieveTileIdsByRow, calculateFirstFreeIndex);\r\n  };\r\n\r\n  const moveRightFactory = () => {\r\n    const retrieveTileIdsByRow = (rowIndex: number) => {\r\n      const tileMap = retrieveTileMap();\r\n\r\n      const tileIdsInRow = [\r\n        tileMap[rowIndex * tileCountPerRowOrColumn + 0],\r\n        tileMap[rowIndex * tileCountPerRowOrColumn + 1],\r\n        tileMap[rowIndex * tileCountPerRowOrColumn + 2],\r\n        tileMap[rowIndex * tileCountPerRowOrColumn + 3],\r\n      ];\r\n\r\n      const nonEmptyTiles = tileIdsInRow.filter((id) => id !== 0);\r\n      return nonEmptyTiles.reverse();\r\n    };\r\n\r\n    const calculateFirstFreeIndex = (\r\n      tileIndex: number,\r\n      tileInRowIndex: number,\r\n      howManyMerges: number,\r\n      maxIndexInRow: number\r\n    ) => {\r\n      return (\r\n        tileIndex * tileCountPerRowOrColumn +\r\n        maxIndexInRow +\r\n        howManyMerges -\r\n        tileInRowIndex\r\n      );\r\n    };\r\n\r\n    return move.bind(this, retrieveTileIdsByRow, calculateFirstFreeIndex);\r\n  };\r\n\r\n  const moveUpFactory = () => {\r\n    const retrieveTileIdsByColumn = (columnIndex: number) => {\r\n      const tileMap = retrieveTileMap();\r\n\r\n      const tileIdsInColumn = [\r\n        tileMap[columnIndex + tileCountPerRowOrColumn * 0],\r\n        tileMap[columnIndex + tileCountPerRowOrColumn * 1],\r\n        tileMap[columnIndex + tileCountPerRowOrColumn * 2],\r\n        tileMap[columnIndex + tileCountPerRowOrColumn * 3],\r\n      ];\r\n\r\n      const nonEmptyTiles = tileIdsInColumn.filter((id) => id !== 0);\r\n      return nonEmptyTiles;\r\n    };\r\n\r\n    const calculateFirstFreeIndex = (\r\n      tileIndex: number,\r\n      tileInColumnIndex: number,\r\n      howManyMerges: number,\r\n      _: number\r\n    ) => {\r\n      return (\r\n        tileIndex +\r\n        tileCountPerRowOrColumn * (tileInColumnIndex - howManyMerges)\r\n      );\r\n    };\r\n\r\n    return move.bind(this, retrieveTileIdsByColumn, calculateFirstFreeIndex);\r\n  };\r\n\r\n  const moveDownFactory = () => {\r\n    const retrieveTileIdsByColumn = (columnIndex: number) => {\r\n      const tileMap = retrieveTileMap();\r\n\r\n      const tileIdsInColumn = [\r\n        tileMap[columnIndex + tileCountPerRowOrColumn * 0],\r\n        tileMap[columnIndex + tileCountPerRowOrColumn * 1],\r\n        tileMap[columnIndex + tileCountPerRowOrColumn * 2],\r\n        tileMap[columnIndex + tileCountPerRowOrColumn * 3],\r\n      ];\r\n\r\n      const nonEmptyTiles = tileIdsInColumn.filter((id) => id !== 0);\r\n      return nonEmptyTiles.reverse();\r\n    };\r\n\r\n    const calculateFirstFreeIndex = (\r\n      tileIndex: number,\r\n      tileInColumnIndex: number,\r\n      howManyMerges: number,\r\n      maxIndexInColumn: number\r\n    ) => {\r\n      return (\r\n        tileIndex +\r\n        tileCountPerRowOrColumn *\r\n          (maxIndexInColumn - tileInColumnIndex + howManyMerges)\r\n      );\r\n    };\r\n\r\n    return move.bind(this, retrieveTileIdsByColumn, calculateFirstFreeIndex);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isInitialRender.current) {\r\n      createTile({ position: [0, 1], value: 2 });\r\n      createTile({ position: [0, 2], value: 2 });\r\n      isInitialRender.current = false;\r\n      return;\r\n    }\r\n\r\n    if (!inMotion && hasChanged) {\r\n      generateRandomTile();\r\n    }\r\n  }, [hasChanged, inMotion, createTile, generateRandomTile]);\r\n\r\n  const tileList = byIds.map((tileId) => tiles[tileId]);\r\n\r\n  const moveLeft = moveLeftFactory();\r\n  const moveRight = moveRightFactory();\r\n  const moveUp = moveUpFactory();\r\n  const moveDown = moveDownFactory();\r\n\r\n  return [tileList, moveLeft, moveRight, moveUp, moveDown] as [\r\n    TileMeta[],\r\n    () => void,\r\n    () => void,\r\n    () => void,\r\n    () => void\r\n  ];\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useThrottledCallback } from \"use-debounce\";\r\n\r\nimport { useGame } from \"./hooks/useGame\";\r\nimport { Board, animationDuration, tileCount } from \"../Board\";\r\n\r\nexport const Game = () => {\r\n  const [tiles, moveLeft, moveRight, moveUp, moveDown] = useGame();\r\n\r\n  const handleKeyDown = (e: KeyboardEvent) => {\r\n    e.preventDefault();\r\n\r\n    switch (e.code) {\r\n      case \"ArrowLeft\":\r\n        moveLeft();\r\n        break;\r\n      case \"ArrowRight\":\r\n        moveRight();\r\n        break;\r\n      case \"ArrowUp\":\r\n        moveUp();\r\n        break;\r\n      case \"ArrowDown\":\r\n        moveDown();\r\n        break;\r\n    }\r\n  };\r\n\r\n  const throttledHandleKeyDown = useThrottledCallback(\r\n    handleKeyDown,\r\n    animationDuration,\r\n    { leading: true, trailing: false }\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", throttledHandleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", throttledHandleKeyDown);\r\n    };\r\n  }, [throttledHandleKeyDown]);\r\n\r\n  return <Board tiles={tiles} tileCountPerRow={tileCount} />;\r\n};\r\n","import { useState } from \"react\";\r\nimport { Button } from \"./components/Button\";\r\nimport { Game } from \"./components/Game\";\r\nimport GithubCorner from \"react-github-corner\";\r\n\r\nimport \"./App.less\";\r\n\r\nexport const App = () => {\r\n  const [date, setDate] = useState<Date>(new Date());\r\n\r\n  const handleRestart = () => {\r\n    setDate(new Date());\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\">\r\n        <GithubCorner href=\"https://github.com/OlexxandrS/2048-game\" />\r\n        <div>\r\n          <h1>Play 2048</h1>\r\n        </div>\r\n        <div>\r\n          <Button onClick={handleRestart}>Restart</Button>\r\n        </div>\r\n      </div>\r\n      <Game key={date.toISOString()} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}